services:
  app:
    container_name: plate-pilot
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - db
    networks:
      - plate-pilot-network
    ports:
      - '8080:8080'
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER:-plateadmin}
      - DB_PASSWORD=${DB_PASSWORD:-secretpassword}
      - DB_NAME=${DB_NAME:-platepilotdb}
      - DB_PORT=${DB_PORT:-5432}
      - APP_ENV=${APP_ENV:-development}
    restart: unless-stopped
    develop:
      watch:
        - action: rebuild
          path: .
          target: app

  db:
    image: postgres:15-alpine
    container_name: plate-pilot-db
    networks:
      - plate-pilot-network
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=${DB_USER:-plateadmin}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secretpassword}
      - POSTGRES_DB=${DB_NAME:-platepilotdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USER:-plateadmin} -d ${DB_NAME:-platepilotdb}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: plate-pilot-adminer
    networks:
      - plate-pilot-network
    ports:
      - '8081:8080'
    depends_on:
      - db
    restart: unless-stopped

  cache:
    image: redis:alpine
    container_name: plate-pilot-cache
    networks:
      - plate-pilot-network
    ports:
      - '6379:6379'
    restart: unless-stopped

networks:
  plate-pilot-network:
    external: true

volumes:
  postgres_data:
